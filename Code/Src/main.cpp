#define ONLINE_PEER 
#include <ReKat.hpp>
using namespace ReKat;

static void ReKat::grapik::Input::Keyboard ( GLFWwindow* window, int key, int scancode, int action, int mode ) { }
static void ReKat::grapik::Input::Mouse ( GLFWwindow* window, double xpos, double ypos ) { }
static void ReKat::grapik::Input::ScrollWell ( GLFWwindow* window, double xoffset, double yoffset ) { }
static void ReKat::grapik::Input::FreamBufferResize ( GLFWwindow* window, int width, int height ) { }

#include <filesystem>

int generate_id ( size_t hash ) {
    int D = time (0);
    std::hash <size_t> hasher;
    return hasher( hash + hasher (D) );
}

// file saved for every user/password
// root:
//      <client_hash>:
//          main_client_log.data   // the main log // saves identifier and concected_cleints names and IDs, // crivpted with key generated by name_pasw_hash 
//          <conected_client1_log> // a log for eatch connected socket (identified by their name and identifier)
//          <conected_client2_log>
//          <conected_client3_log>
enum Status {
    SUCCES,
    PATH_EXISTS
};

int setup ( size_t path_hash ) {
    std::string path = std::to_string ( path_hash );

    if ( std::filesystem::exists ( path ) ) { return PATH_EXISTS; }

    std::filesystem::create_directory ( path );
    std::ofstream{path+"/main_client_log"};

    return SUCCES;
}

int main(int argc, char const *argv[]) {
    std::string name = "Giovanni";
    std::string pass = "Gattone ";

    std::hash <std::string> hasher;

    size_t path_hash      = hasher ( name + pass );
    size_t generator_hash = hasher ( name + "_" + pass );

    setup ( path_hash );
    std::cout << generate_id ( path_hash );

    online::Start ( name, "6969" );
}
